# version: '3.8'  # Removed as it's obsolete

services:
  # API Gateway
  api-gateway:
    build: .
    container_name: api-gateway
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - LOG_LEVEL=info
      - AUTH_SERVICE_URL=http://auth-service:3001
      - USER_SERVICE_URL=http://user-service:3002
      - PRODUCT_SERVICE_URL=http://product-service:3003
      - ORDER_SERVICE_URL=http://order-service:3004
      - NOTIFICATION_SERVICE_URL=http://notification-service:3005
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-change-this-in-production}
      - ALLOWED_ORIGINS=http://localhost:3000,http://localhost:8080
    volumes:
      - ./logs:/app/logs
    networks:
      - microservices-network
    depends_on:
      - mongo
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Microservices - Uncomment when available
  # Servicio de Autenticación
  # auth-service:
  #   image: auth-service:latest
  #   container_name: auth-service
  #   ports:
  #     - "3001:3001"
  #   environment:
  #     - NODE_ENV=production
  #     - PORT=3001
  #     - DATABASE_URL=${AUTH_DATABASE_URL:-mongodb://mongo:27017/auth}
  #     - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-change-this-in-production}
  #   networks:
  #     - microservices-network
  #   depends_on:
  #     - mongo
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

  # Servicio de Usuarios
  # user-service:
  #   image: user-service:latest
  #   container_name: user-service
  #   ports:
  #     - "3002:3002"
  #   environment:
  #     - NODE_ENV=production
  #     - PORT=3002
  #     - DATABASE_URL=${USER_DATABASE_URL:-mongodb://mongo:27017/users}
  #   networks:
  #     - microservices-network
  #   depends_on:
  #     - mongo
  #   restart: unless-stopped

  # Servicio de Productos
  # product-service:
  #   image: product-service:latest
  #   container_name: product-service
  #   ports:
  #     - "3003:3003"
  #   environment:
  #     - NODE_ENV=production
  #     - PORT=3003
  #     - DATABASE_URL=${PRODUCT_DATABASE_URL:-mongodb://mongo:27017/products}
  #   networks:
  #     - microservices-network
  #   depends_on:
  #     - mongo
  #   restart: unless-stopped

  # Servicio de Pedidos
  # order-service:
  #   image: order-service:latest
  #   container_name: order-service
  #   ports:
  #     - "3004:3004"
  #   environment:
  #     - NODE_ENV=production
  #     - PORT=3004
  #     - DATABASE_URL=${ORDER_DATABASE_URL:-mongodb://mongo:27017/orders}
  #   networks:
  #     - microservices-network
  #   depends_on:
  #     - mongo
  #   restart: unless-stopped

  # Servicio de Notificaciones
  # notification-service:
  #   image: notification-service:latest
  #   container_name: notification-service
  #   ports:
  #     - "3005:3005"
  #   environment:
  #     - NODE_ENV=production
  #     - PORT=3005
  #     - DATABASE_URL=${NOTIFICATION_DATABASE_URL:-mongodb://mongo:27017/notifications}
  #   networks:
  #     - microservices-network
  #   depends_on:
  #     - mongo
  #   restart: unless-stopped

  # Base de datos MongoDB
  mongo:
    image: mongo:6.0
    container_name: mongodb
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD:-password123}
    volumes:
      - mongo-data:/data/db
      - ./mongo-init:/docker-entrypoint-initdb.d
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional Services - Uncomment when needed
  # Nginx como Load Balancer (opcional)
  # nginx:
  #   image: nginx:alpine
  #   container_name: nginx-lb
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ./ssl:/etc/nginx/ssl:ro
  #   networks:
  #     - microservices-network
  #   depends_on:
  #     - api-gateway
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD", "nginx", "-t"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

  # Monitoring con Prometheus (opcional)
  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: prometheus
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
  #     - prometheus-data:/prometheus
  #   networks:
  #     - microservices-network
  #   restart: unless-stopped
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #     - '--storage.tsdb.path=/prometheus'
  #     - '--web.console.libraries=/etc/prometheus/console_libraries'
  #     - '--web.console.templates=/etc/prometheus/consoles'
  #     - '--storage.tsdb.retention.time=200h'
  #     - '--web.enable-lifecycle'

  # Grafana para visualización (opcional)
  # grafana:
  #   image: grafana/grafana:latest
  #   container_name: grafana
  #   ports:
  #     - "3001:3000"
  #   environment:
  #     - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
  #   volumes:
  #     - grafana-data:/var/lib/grafana
  #   networks:
  #     - microservices-network
  #   restart: unless-stopped

volumes:
  mongo-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  microservices-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16